-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity anomaly_detection_JetToCartesian is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x_et : IN STD_LOGIC_VECTOR (10 downto 0);
    x_eta : IN STD_LOGIC_VECTOR (7 downto 0);
    x_phi : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (16 downto 0) );
end;


architecture behav of anomaly_detection_JetToCartesian is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_24 : STD_LOGIC_VECTOR (7 downto 0) := "00100100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sin_table_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sin_table_2_ce0 : STD_LOGIC;
    signal sin_table_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_table_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sin_table_2_ce1 : STD_LOGIC;
    signal sin_table_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sinh_table_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sinh_table_3_ce0 : STD_LOGIC;
    signal sinh_table_3_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_et_read_reg_276 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Result_s_fu_118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_282 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln587_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln587_3_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln587_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_126_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_848_fu_132_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_V_fu_155_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal eta_V_fu_142_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln712_fu_171_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_fu_194_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1171_21_fu_191_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_fu_194_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln_fu_200_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_491_fu_218_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_491_fu_218_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln717_s_fu_224_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln168_fu_177_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1171_fu_242_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1171_fu_242_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln717_3_fu_234_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln717_fu_210_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1171_fu_242_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component anomaly_detection_mul_11ns_8s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component anomaly_detection_mul_13s_11ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component anomaly_detection_JetToCartesian_sin_table_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component anomaly_detection_JetToCartesian_sinh_table_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    sin_table_2_U : component anomaly_detection_JetToCartesian_sin_table_2_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_table_2_address0,
        ce0 => sin_table_2_ce0,
        q0 => sin_table_2_q0,
        address1 => sin_table_2_address1,
        ce1 => sin_table_2_ce1,
        q1 => sin_table_2_q1);

    sinh_table_3_U : component anomaly_detection_JetToCartesian_sinh_table_3_ROM_AUTO_1R
    generic map (
        DataWidth => 13,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sinh_table_3_address0,
        ce0 => sinh_table_3_ce0,
        q0 => sinh_table_3_q0);

    mul_11ns_8s_19_1_1_U1 : component anomaly_detection_mul_11ns_8s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 19)
    port map (
        din0 => r_V_fu_194_p0,
        din1 => sin_table_2_q1,
        dout => r_V_fu_194_p2);

    mul_11ns_8s_19_1_1_U2 : component anomaly_detection_mul_11ns_8s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 8,
        dout_WIDTH => 19)
    port map (
        din0 => r_V_491_fu_218_p0,
        din1 => sin_table_2_q0,
        dout => r_V_491_fu_218_p2);

    mul_13s_11ns_24_1_1_U3 : component anomaly_detection_mul_13s_11ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 11,
        dout_WIDTH => 24)
    port map (
        din0 => select_ln168_fu_177_p3,
        din1 => mul_ln1171_fu_242_p1,
        dout => mul_ln1171_fu_242_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_s_reg_282 <= x_eta(7 downto 7);
                x_et_read_reg_276 <= x_et;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= sext_ln717_3_fu_234_p1;
    ap_return_1 <= sext_ln717_fu_210_p1;
    ap_return_2 <= mul_ln1171_fu_242_p2(20 downto 4);
    eta_V_fu_142_p3 <= 
        p_Result_848_fu_132_p4 when (p_Result_s_fu_118_p3(0) = '1') else 
        x_eta;
    mul_ln1171_fu_242_p1 <= mul_ln1171_fu_242_p10(11 - 1 downto 0);
    mul_ln1171_fu_242_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_et_read_reg_276),24));
    
    p_Result_848_fu_132_p4_proc : process(p_Val2_s_fu_126_p2)
    begin
        p_Result_848_fu_132_p4 <= p_Val2_s_fu_126_p2;
        p_Result_848_fu_132_p4(7) <= ap_const_lv1_0(0);
    end process;

    p_Result_s_fu_118_p3 <= x_eta(7 downto 7);
    p_Val2_s_fu_126_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(x_eta));
    phi_V_fu_155_p2 <= std_logic_vector(unsigned(x_phi) + unsigned(ap_const_lv8_24));
    r_V_491_fu_218_p0 <= zext_ln1171_21_fu_191_p1(11 - 1 downto 0);
    r_V_fu_194_p0 <= zext_ln1171_21_fu_191_p1(11 - 1 downto 0);
    select_ln168_fu_177_p3 <= 
        sub_ln712_fu_171_p2 when (p_Result_s_reg_282(0) = '1') else 
        sinh_table_3_q0;
        sext_ln587_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(eta_V_fu_142_p3),64));

        sext_ln717_3_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln717_s_fu_224_p4),17));

        sext_ln717_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_200_p4),17));

    sin_table_2_address0 <= zext_ln587_3_fu_161_p1(11 - 1 downto 0);
    sin_table_2_address1 <= zext_ln587_fu_150_p1(11 - 1 downto 0);

    sin_table_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sin_table_2_ce0 <= ap_const_logic_1;
        else 
            sin_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sin_table_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sin_table_2_ce1 <= ap_const_logic_1;
        else 
            sin_table_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sinh_table_3_address0 <= sext_ln587_fu_166_p1(11 - 1 downto 0);

    sinh_table_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sinh_table_3_ce0 <= ap_const_logic_1;
        else 
            sinh_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln712_fu_171_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(sinh_table_3_q0));
    trunc_ln717_s_fu_224_p4 <= r_V_491_fu_218_p2(18 downto 5);
    trunc_ln_fu_200_p4 <= r_V_fu_194_p2(18 downto 5);
    zext_ln1171_21_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_et_read_reg_276),19));
    zext_ln587_3_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_V_fu_155_p2),64));
    zext_ln587_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_phi),64));
end behav;
